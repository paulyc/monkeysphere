From: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
Date: Fri, 10 May 2019 16:30:11 -0400
Subject: mh import-key: use ssh-add and gpg-agent for import (Closes:
 #909700)

This directly fixes the problem that monkeysphere-host was failing to
import the style of SSH host key that was generated by default by
ssh-keygen.

As a side effect, we can now support all the host key algorithms that
are supported by both gpg-agent (in its ssh-agent implementation) and
ssh-add.

The lockfile and the dancing around the gpg-agent run in
$GNUPGHOME_HOST is a bit awkward.  It would be nicer to use an
ephemeral GnuPG homedir as recommended in the "Unattended Usage"
section of the gnupg info pages, but to do that we'd need to be able
to extract the secret key, which is blocked by
https://dev.gnupg.org/T4490
---
 man/man8/monkeysphere-host.8 |  7 ++--
 src/share/mh/import_key      | 82 ++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 79 insertions(+), 10 deletions(-)

diff --git a/man/man8/monkeysphere-host.8 b/man/man8/monkeysphere-host.8
index 3e37057..6ae30ed 100644
--- a/man/man8/monkeysphere-host.8
+++ b/man/man8/monkeysphere-host.8
@@ -27,9 +27,10 @@ be omitted, and \fBmonkeysphere\-host\fP will operate on it.
 \fBmonkeysphere\-host\fP takes various subcommands:
 .TP
 .B import\-key FILE SCHEME://HOSTNAME[:PORT]
-Import a PEM\-encoded host secret key from file FILE.  If FILE is
-`\-', then the key will be imported from stdin.  Only RSA keys are
-supported at the moment.  SCHEME://HOSTNAME[:PORT] is used to specify
+Import an SSH host secret key from file FILE.  If FILE is
+`\-', then the key will be imported from stdin, and must be an
+RSA key in PEM\-encoded format.
+SCHEME://HOSTNAME[:PORT] is used to specify
 the scheme (e.g. ssh or https), fully\-qualified hostname (and port)
 used in the user ID of the new OpenPGP key (e.g. ssh://example.net or
 https://www.example.net).  If PORT is not specified, then no port is
diff --git a/src/share/mh/import_key b/src/share/mh/import_key
index 0f362b8..ebe2cc3 100644
--- a/src/share/mh/import_key
+++ b/src/share/mh/import_key
@@ -18,7 +18,7 @@ local serviceName="$2"
 
 # check that key file specified
 if [ -z "$keyFile" ] ; then
-    failure "Must specify PEM-encoded key file to import, or specify '-' for stdin."
+    failure "Must specify key file to import, or specify '-' for PEM-encoded RSA key on stdin."
 fi
 
 # fail if hostname not specified
@@ -37,16 +37,84 @@ mkdir -p "${MHDATADIR}"
 mkdir -p "${GNUPGHOME_HOST}"
 chmod 700 "${GNUPGHOME_HOST}"
 
-# import pem-encoded key to an OpenPGP private key
+key_type_from_file() {
+    # translates from OpenSSH's pubkey format string to GnuPG's
+    # Key-Type parameter:
+    local keyType
+    if keyType=$(ssh-keygen -y -f "$keyFile" | awk '{ print $1 }'); then
+        case "$keyType" in
+            ssh-dss)
+                echo DSA
+                ;;
+            ecdsa-sha2-nistp256)
+                echo ECDSA
+                ;;
+            ssh-ed25519)
+                echo EDDSA
+                ;;
+            ssh-rsa)
+                echo RSA
+                ;;
+            *)
+                log error "unknown key type '$keyType' from file '$keyFile'"
+                return 1
+                ;;
+        esac
+    else
+        log error "ssh-keygen could not interpret '$keyFile'"
+        return 1
+    fi
+    return 0
+}
+
+
 if [ "$keyFile" = '-' ] ; then
-    log verbose "importing key from stdin..."
+    # import PEM-encoded RSA stdin to an OpenPGP private key
+    log verbose "importing PEM-encoded RSA key from stdin..."
     PEM2OPENPGP_USAGE_FLAGS=authenticate pem2openpgp "$serviceName" \
 	| gpg_host --import
 else
-    log verbose "importing key from file '$keyFile'..."
-    PEM2OPENPGP_USAGE_FLAGS=authenticate pem2openpgp "$serviceName" \
-	<"$keyFile" \
-	| gpg_host --import
+    # import some sort of file that OpenSSH's keygen can handle
+    if keyType=$(key_type_from_file "$keyFile"); then
+        # we lock to avoid concurrent interactions with gpg-agent and
+        # the sshcontrol file would be dubious
+        lock create "$GNUPGHOME_HOST/importlock"
+        if test -e "$GNUPGHOME_HOST/sshcontrol" && grep -q '^[0-9A-F]' "$GNUPGHOME_HOST/sshcontrol"; then
+            backupSshControl=$(mktemp "$GNUPGHOME_HOST/sshcontrol.XXXXXXXX")
+            log error "$GNUPGHOME_HOST/sshcontrol already contained a key, backing up to $backupSshControl"
+            mv -f "$GNUPGHOME_HOST/sshcontrol" "$backupSshControl"
+        fi
+        
+        log verbose "importing $keyType key from file '$keyFile'..."
+        if ! { test -e "$GNUPGHOME_HOST/gpg-agent.conf" && grep -Fxq batch "$GNUPGHOME_HOST/gpg-agent.conf" ; }; then
+            echo batch >> "$GNUPGHOME_HOST/gpg-agent.conf"
+            GNUPGHOME="$GNUPGHOME_HOST" gpgconf --reload gpg-agent
+            GNUPGHOME="$GNUPGHOME_HOST" gpgconf --launch gpg-agent
+        fi
+        SSH_AUTH_SOCK=$(GNUPGHOME="$GNUPGHOME_HOST" gpgconf --list-dirs agent-ssh-socket) ssh-add "$keyFile"
+        if keyGrip=$(awk '/^[0-9A-F]/{print $1}' < "$GNUPGHOME_HOST/sshcontrol") &&
+           test -n "$keyGrip" && [ $(wc -l <<<"$keyGrip") -eq 1 ] ; then
+            gpg_host --batch --full-generate-key <<EOF
+Key-Type: $keyType
+Key-Grip: $keyGrip
+Key-Usage: auth
+Name-Real: $serviceName
+%no-protection
+%commit
+EOF
+        else
+            rm -f "$GNUPGHOME_HOST/sshcontrol"
+            lock remove "$GNUPGHOME_HOST/importlock"
+            failure "did not find a single keygrip in $GNUPGHOME_HOST/sshcontrol during import"
+        fi
+        rm -f "$GNUPGHOME_HOST/sshcontrol"
+        lock remove "$GNUPGHOME_HOST/importlock"
+    else
+        log error "falling back to pem2openpgp (which will probably still fail)..."
+        PEM2OPENPGP_USAGE_FLAGS=authenticate pem2openpgp "$serviceName" \
+	                       <"$keyFile" \
+	    | gpg_host --import
+    fi
 fi
 
 # export to OpenPGP public key to file
